class Railway
{
	 public:
		  char key[5],name[30],price[5],availseats[10],train[12],src[16],dest[16];
		  void initial();
		  void read();
		  void store(int);
		  int remove(int,char *);
		  int hash(char *);
		  void displayall();
		  void retrieve(int addr,char k[]);
 };
void Railway::initial()
{
	int i,j;
	file.open(fn,ios::in);
	if(!file)
	{
		file.open(fn,ios::out);
		if(!file)
		{
			cout<<"Unable to open the file";
			getch();
			exit(1);
		}
		for(i=0;i<max;i++)
		{
			file.seekp(i*recsize*5+i*2,ios::beg);
			for(j=0;j<(recsize)*5;j++)
				file<<"#";
			file<<endl;
		}
		cout<<"Empty file created"<<endl;
	}
	file.close();
	return;
 }
 
 
 
 
 
void Railway::read()
{
	cout<<"Enter the record key:";	gets(key);
	cout<<"Enter the name:";        gets(name);
	cout<<"Enter the price:";      	gets(price);
	cout<<"Enter the availseats:";  gets(availseats);
	cout<<"Enter the train name:";  gets(train);
	cout<<"Enter the source:";      gets(src);
	cout<<"Enter the destination:"; gets(dest);
	strcpy(buffer,key);             strcat(buffer,"|");
	strcat(buffer,name);            strcat(buffer,"|");
	strcat(buffer,price);           strcat(buffer,"|");
	strcat(buffer,availseats);      strcat(buffer,"|");
	strcat(buffer,train);           strcat(buffer,"|");
	strcat(buffer,src);             strcat(buffer,"|");
	strcat(buffer,dest);            strcat(buffer,"|");
	
	return;
 }
int Railway::hash(char* key)
{
	int i=0,sum=0;
	while(key[i]!='\0')
	{
		sum=sum+(key[i]-48);
		i++;
	}
	return sum % max;
}






void Railway::store(int addr)
{
	char dummy[10];
	int flag=0,i,j;
	file.open(fn,ios::in|ios::out);
	file.seekp(addr*recsize*5+addr*2);
	file.getline(dummy,5,'\n');
	if(strcmp(dummy,"####")==0)
	{
		 file.seekp(addr*recsize*5+i*2);
		 file<<buffer;
		 flag=1;
	}
	else
	{
		for(i=0;i<5;i++)
		{
			file.seekg(addr*recsize*5+i*recsize+addr*2);
			file.getline(dummy,5,'\n');
			//cout<<"dummy "<<dummy<<addr*recsize*5+i*recsize+addr*2<<"\t";
			if(strcmp(dummy,"####")==0)
			{
				cout<<"\n Collision has occured\n";
				cout<<"Home address is "<<addr*recsize*5+addr*2<<" Actual address is "<<addr*recsize*5+i*recsize+i*2<<"\n";
				file.seekp(addr*recsize*5+i*recsize+2*addr);
				file<<buffer;
				flag=1;
				//cout<<"break now\n";
				return;
			}
		}
		for(i=addr+1;i!=addr;i++)
		{
			if(i%max==0)
				i=0;
			for(j=0;j<5;j++)
			{
				file.seekg(i*recsize*5+j*recsize+2*i);
				file.getline(dummy,5,'\n');
				if(strcmp(dummy,"####")==0)
				{
					cout<<"\n Collision has occured\n";
					cout<<"Home address is "<<addr*recsize*5+i*2<<" Actual address is "<<i*recsize*5+j*recsize+i*2<<"\n";
					file.seekp(i*recsize*5+j*recsize+2*i);
					file<<buffer;
					flag=1;
					return;
					// cout<<"Break now\n";
				}
			}
		}
	}
	if(i==addr && (!flag))
		cout<<"Hash file is full,record cannot be inserted\n";
	file.close();
	return;
}



void Railway::retrieve(int addr,char k[])
{
	int found=0,i;
	char dummy[10];
	i=addr;
	file.open(fn,ios::in|ios::out|ios::binary);
	do
	{
		file.seekg(i*recsize*5+i*2);
		file.getline(dummy,5,'\n');
		if(strcmp(dummy,"####")==0)
			break;
		file.seekg(i*recsize*5+i*2);
		file.getline(key,5,'|');
	   //	cout<<key<<endl;
		if(strcmp(key,k)==0)
		{
			found=1;
			cout<<"Record found"<<endl;
			file.getline(name,30,'|');
			file.getline(price,5,'|');
			file.getline(availseats,16,'|');
			file.getline(train,10,'|');
			file.getline(src,16,'|');
			file.getline(dest,17,'|');
			cout<<setiosflags(ios::left);
			cout<<"Key="<<key<<"\n"<<"Name="<<name<<"\n"<<"Price="<<price<<"\n"<<"availseats="<<availseats<<"\n"<<"train="<<train<<"\n"<<"src="<<src<<"\n"<<"dest="<<dest<<endl;
			return;
		}
		else
		{
			for(int j=0;j<5;j++){
				file.seekg(i*recsize*5+j*recsize+i*2);
				file.getline(dummy,5,'\n');
				//cout<<dummy<<" dummy "<<(i*recsize*5+j*recsize+i*2)<<"\t";
				if(strcmp(dummy,"####")==0)
					break;
				file.seekg(i*recsize*5+j*recsize+i*2);
				file.getline(key,5,'|');

			  //	cout<<key<<endl;
				if(strcmp(key,k)==0)
				{
					found=1;
					cout<<"Record found"<<endl;
					file.getline(name,30,'|');
					file.getline(price,5,'|');
					file.getline(availseats,16,'|');
					file.getline(train,10,'|');
					file.getline(src,16,'|');
					file.getline(dest,17,'|');
					cout<<setiosflags(ios::left);
					cout<<"Key="<<key<<"\n"<<"Name="<<name<<"\n"<<"Price="<<price<<"\n"<<"availseats="<<availseats<<"\n"<<"train="<<train<<"\n"<<"src="<<src<<"\n"<<"dest="<<dest<<endl;
					return;
				}
			}
			i++;
			if(i%max==0)
					i=0;
		}
	} while(i!=addr);
	if(found==0)
		cout<<"\nRecord does not exist in hash file\n";
	return;
}

